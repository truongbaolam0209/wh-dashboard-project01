{"version":3,"sources":["assets/constant.js","utils/function.js","components/ChartBarDrawing.jsx","components/ui/CardPanel.jsx","components/ChartBarDrawingLate.jsx","components/ChartBarStack.jsx","components/ChartPieDrawing.jsx","components/ChartProgress.jsx","components/ui/ButtonCapsule.jsx","components/FormPivot.jsx","components/NavBar.jsx","components/TableDrawingList.jsx","components/ui/CardPanelProject.jsx","layouts/PageDashboard.jsx","layouts/PageLogin.jsx","App.js","serviceWorker.js","index.js"],"names":["colorType","pieChartColors2","sizeType","chartWidth","window","innerWidth","getDataConverted","projectArray","dataOutput","i","project","categoryArray","_","map","columns","columnsIndexArray","forEach","cate","cl","title","index","indexDrawingName","indexRev","allDrawings","allDrawingsLatestRevision","rows","length","dwg","undefined","cells","value","push","found","j","String","splice","name","slice","getAllDrawingSameValueInOneColumn","column","dataType","drawings","indexCategory","drawingCount","drawingList","getDrawingLateNow","data","type","dwgsLateNow","columnHeader","status","includes","dateT","dateA","moment","diff","mergeUndefined","mergeWith","pickDataToTable","dwgArray","drawingNumber","drawingName","rfaRef","drgType","useFor","coordinatorInCharge","modeller","drgToConsultantT","drgToConsultantA","getApprovalT","getApprovalA","rev","ChartBarDrawing","openDrawingTable","projectName","dataChart","useState","activeIndex","setActiveIndex","style","margin","display","width","height","top","right","left","bottom","padding","barSize","dataKey","textAnchor","angle","interval","scale","strokeDasharray","background","fill","onClick","e","category","onMouseEnter","onMouseLeave","entry","cursor","key","CardPanel","children","headColor","xs","span","md","xl","boxShadow","border","paddingBottom","marginBottom","borderRadius","overflow","bodyStyle","headStyle","backgroundColor","color","lineHeight","ChartBarDrawingLate","Object","keys","drawingsLateApproval","inputData","position","paddingLeft","item","StyledBadge","size","text","styled","Badge","ChartBarStack","convertDataToStackedChart","productivity","inputStack","itemArr","tickSize","stackId","allKeys","Set","projectData","ChartPieDrawing","console","log","cx","cy","labelLine","label","renderCustomizedLabel","outerRadius","portion","args","midAngle","innerRadius","percent","radius","x","Math","cos","PI","y","sin","dominantBaseline","ChartProgress","drawingsLateSubmission","lateForConstruction","dataInput","modalShown","setModalShown","drawingStatusTableOnClose","Container","dwgs","progressBarClick","trailColor","strokeColor","round","centered","visible","onOk","onCancel","div","ButtonCapsule","props","btnname","FormPivot","pivotArray","setPivotArray","titleLeft","setTitleLeft","setValue","selected","setSelected","modalFormatVisible","setModalFormatVisible","selectFormat","formatType","target","textContent","filter","onRemoveCategory","btnName","previousSibling","innerText","marginTop","marginRight","SpanOmit","showSearch","placeholder","optionFilterProp","onChange","columnsInDateFormat","filterOption","input","option","toLowerCase","indexOf","Option","footer","NavBar","Header","zIndex","paddingTop","float","paddingRight","fontSize","textAlign","icon","MessageOutlined","DownCircleOutlined","Table","useTable","useGroupBy","useExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","groupBy","expanded","headerGroup","getHeaderGroupProps","headers","getHeaderProps","canGroupBy","getGroupByToggleProps","isGrouped","render","overflowY","row","getRowProps","cell","getCellProps","isAggregated","isPlaceholder","getExpandedToggleProps","isExpanded","subRows","IconTable","TableDrawingList","useMemo","accessor","innerHeight","CardPanelProject","justify","PageDashboard","setData","loading","setLoading","useEffect","a","Axios","post","listSheetId","result","loadData","drawingTableVisible","setDrawingTableVisible","drawingTableData","setDrawingTableData","toUpperCase","ChartPanel","fontWeight","SkeletonCard","headTitleColor","PageLogin","className","labelCol","wrapperCol","onFinish","Item","src","alt","rules","required","message","prefix","UserOutlined","autoComplete","min","Password","LockOutlined","iconRender","offset","htmlType","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b3315347.chunk.js","sourcesContent":["\r\n\r\n\r\nexport const colorType = {\r\n    yellow: '#fff200',\r\n    dark: '#1e272e',\r\n    grey0: '#ecf0f1',\r\n    grey1: '#bdc3c7',\r\n    grey2: '#636e72',\r\n    red: '#b33939',\r\n    green: '#05c46b',\r\n    blue: '#0984e3',\r\n    orange: '#cc8e35',\r\n};\r\n\r\nexport const pieChartColors = [\r\n    '#fff200',\r\n    '#05c46b',\r\n    '#b33939',\r\n    '#0984e3',\r\n    '#cc8e35',\r\n    '#9b59b6',\r\n    '#2c3e50',\r\n    '#4cd137',\r\n    '#d1ccc0'\r\n];\r\n\r\nexport const pieChartColors2 = {\r\n    'Approved with comments, to Resubmit': '#fff200',\r\n    'Approved with Comment, no submission Required': '#05c46b',\r\n    'Approved for Construction': '#b33939',\r\n    'Consultant reviewing': '#0984e3',\r\n    'Not Started': '#cc8e35',\r\n    'Revise In-Progress': '#9b59b6',\r\n    '1st cut of drawing in-progress': '#2c3e50',\r\n\r\n\r\n\r\n\r\n    'Modelling': '#fff200',\r\n    'Shopdrawing': '#05c46b',\r\n    'Submit To Consultant': '#b33939',\r\n    'Consultant Reply': '#0984e3',\r\n    'Get Approval': '#cc8e35'\r\n};\r\n\r\n\r\nexport const sizeType = {\r\n    xs: 576,\r\n    md: 768,\r\n    lg: 992,\r\n    xl: 1200\r\n};\r\n\r\n\r\nexport const dataScheme = {\r\n    projectsDummy: [\r\n        { name: 'Sumang', year: 2012, delayConstruction: 998, delayApproval: 550, productivity: 0.75 },\r\n        { name: 'Garden', year: 2013, delayConstruction: 1170, delayApproval: 600, productivity: 0.55 },\r\n        { name: 'Jokoon', year: 2014, delayConstruction: 500, delayApproval: 750, productivity: 0.4 },\r\n        { name: 'Kembangan', year: 2015, delayConstruction: 650, delayApproval: 900, productivity: 0.6 },\r\n        { name: 'KCDE', year: 2016, delayConstruction: 800, delayApproval: 590, productivity: 0.75 },\r\n        { name: 'Handy', year: 2017, delayConstruction: 750, delayApproval: 350, productivity: 0.85 },\r\n        { name: 'Funan', year: 2018, delayConstruction: 300, delayApproval: 305, productivity: 0.7 },\r\n        { name: 'Gul Circle', year: 2019, delayConstruction: 400, delayApproval: 415, productivity: 0.1 },\r\n        { name: 'Changi T5', year: 2020, delayConstruction: 680, delayApproval: 435, productivity: 0.4 },\r\n        { name: 'Dleedon', year: 2021, delayConstruction: 800, delayApproval: 395, productivity: 0.75 },\r\n    ],\r\n    overdueDummy: [\r\n        { name: 'Late for construction 1/51', value: 5 },\r\n        { name: 'Overdue date of submissions 49/51', value: 90 },\r\n        { name: 'Overdue date of approval 35/51', value: 76 }\r\n    ],\r\n    revisionCounts: [\r\n        { name: 'Rev 0', nos: 350 },\r\n        { name: 'Rev A', nos: 211 },\r\n        { name: 'Rev B', nos: 256 },\r\n        { name: 'Rev C', nos: 58 },\r\n        { name: 'Rev D', nos: 42 }\r\n    ]\r\n};\r\n\r\n\r\n\r\nexport const chartWidth = window.innerWidth >= sizeType.xl ? (window.innerWidth - 160) / 4 :\r\n    window.innerWidth >= sizeType.md ? (window.innerWidth - 80) / 2 :\r\n        window.innerWidth - 100;\r\n\r\n\r\n\r\n\r\n\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\n// convert data from DB of all projects\r\nexport const getDataConverted = (projectArray) => {\r\n\r\n    let dataOutput = {};\r\n    for (let i = 0; i < projectArray.length; i++) {\r\n\r\n        // get the column header\r\n        const project = projectArray[i];\r\n        const categoryArray = _.map(project.columns, 'title');\r\n        let columnsIndexArray = {};\r\n        categoryArray.forEach(cate => {\r\n            project.columns.forEach(cl => {\r\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\r\n            });\r\n        });\r\n\r\n        const indexDrawingName = columnsIndexArray['Drawing Name'];\r\n        const indexRev = columnsIndexArray['Rev'];\r\n\r\n        let allDrawings = [];\r\n        let allDrawingsLatestRevision = [];\r\n\r\n        for (let i = 0; i < project.rows.length; i++) {\r\n            const dwg = project.rows[i];\r\n            if (dwg.cells[indexDrawingName].value === undefined) continue; // make sure all drawing name is keyed in\r\n            allDrawings.push([...dwg.cells]);\r\n\r\n            if (dwg.cells[indexRev].value === undefined) {\r\n                allDrawingsLatestRevision.push([...dwg.cells]);\r\n                continue;\r\n            };\r\n\r\n            let found = false;\r\n            for (let j = 0; j < allDrawingsLatestRevision.length; j++) {\r\n                if (allDrawingsLatestRevision[j][indexDrawingName].value === dwg.cells[indexDrawingName].value) {\r\n                    found = true;\r\n                    if (String(allDrawingsLatestRevision[j][indexRev].value) < String(dwg.cells[indexRev].value)) {\r\n                        allDrawingsLatestRevision.splice(j, 1);\r\n                        allDrawingsLatestRevision.push([...dwg.cells]);\r\n                    };\r\n                    break;\r\n                };\r\n            };\r\n            if (!found) allDrawingsLatestRevision.push([...dwg.cells]);\r\n        };\r\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\r\n            columnsIndexArray,\r\n            allDrawings,\r\n            allDrawingsLatestRevision\r\n        };\r\n    };\r\n    return dataOutput;\r\n};\r\n\r\n\r\n\r\nexport const getAllDrawingSameValueInOneColumn = ({\r\n    columnsIndexArray,\r\n    allDrawings,\r\n    allDrawingsLatestRevision\r\n}, column, dataType) => {\r\n\r\n    const drawings = dataType === 'all' ? allDrawings : allDrawingsLatestRevision;\r\n    const indexCategory = columnsIndexArray[column];\r\n\r\n    let drawingCount = {};\r\n    let drawingList = {};\r\n\r\n    drawings.forEach(dwg => {\r\n        const { value } = dwg[indexCategory];\r\n\r\n        drawingCount[value] = (drawingCount[value] || 0) + 1;\r\n        drawingList[value] = [...drawingList[value] || [], dwg];\r\n    });\r\n\r\n    return {\r\n        drawingCount,\r\n        drawingList\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const getDrawingLateNow = (data, type) => {\r\n\r\n    const { allDrawingsLatestRevision, columnsIndexArray } = data;\r\n\r\n    const dwgsLateNow = [];\r\n    const columnHeader = type === 'getApproval' ? 'get Approval'\r\n        : type === 'drgToConsultant' ? 'Drg to Consultant' : null;\r\n\r\n    allDrawingsLatestRevision.forEach(dwg => {\r\n        const status = dwg[columnsIndexArray['Status']].value;\r\n        // make sure drawing is not approved or consultant reviewing\r\n        if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\r\n\r\n        const dateT = dwg[columnsIndexArray[`${columnHeader} (T)`]].value;\r\n        const dateA = dwg[columnsIndexArray[`${columnHeader} (A)`]].value;\r\n        if (dateT === undefined || dateA !== undefined) return;\r\n\r\n        const diff = moment(dateT).diff(moment(), 'days');\r\n        if (diff < 0) dwgsLateNow.push([...dwg]);\r\n    });\r\n    return dwgsLateNow;\r\n};\r\n\r\n\r\n\r\nexport const mergeUndefined = ({ drawingCount, drawingList }, mergeWith) => {\r\n    if (drawingCount['undefined'] === undefined) return;\r\n\r\n    drawingCount[mergeWith] = (drawingCount[mergeWith] || 0) + drawingCount['undefined'];\r\n    delete drawingCount['undefined'];\r\n\r\n    drawingList[mergeWith] = [...drawingList[mergeWith] || [], ...drawingList['undefined']];\r\n    delete drawingList['undefined'];\r\n\r\n    return {\r\n        drawingCount,\r\n        drawingList\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const pickDataToTable = (drawings, columnsIndexArray) => {\r\n\r\n    let dwgArray = [];\r\n    drawings.forEach(dwg => {\r\n        const drawingNumber = dwg[columnsIndexArray['Drawing Number']].value || 'N/A';\r\n        const drawingName = dwg[columnsIndexArray['Drawing Name']].value || 'N/A';\r\n        const rfaRef = dwg[columnsIndexArray['RFA Ref']].value || 'N/A';\r\n        const drgType = dwg[columnsIndexArray['Drg Type']].value || 'N/A';\r\n        const useFor = dwg[columnsIndexArray['Use For']].value || 'N/A';\r\n        const coordinatorInCharge = dwg[columnsIndexArray['Coordinator In Charge']].value || 'N/A';\r\n        const modeller = dwg[columnsIndexArray['Modeller']].value || 'N/A';\r\n        const drgToConsultantT = dwg[columnsIndexArray['Drg to Consultant (T)']].value || 'N/A';\r\n        const drgToConsultantA = dwg[columnsIndexArray['Drg to Consultant (A)']].value || 'N/A';\r\n        const getApprovalT = dwg[columnsIndexArray['get Approval (T)']].value || 'N/A';\r\n        const getApprovalA = dwg[columnsIndexArray['get Approval (A)']].value || 'N/A';\r\n        const rev = dwg[columnsIndexArray['Rev']].value || 'N/A';\r\n        const status = dwg[columnsIndexArray['Status']].value || 'N/A';\r\n\r\n        dwgArray.push({\r\n            drawingNumber,\r\n            drawingName,\r\n            rfaRef,\r\n            drgType,\r\n            useFor,\r\n            coordinatorInCharge,\r\n            modeller,\r\n            drgToConsultantT,\r\n            drgToConsultantA,\r\n            getApprovalT,\r\n            getApprovalA,\r\n            rev,\r\n            status\r\n        });\r\n    });\r\n\r\n    return dwgArray;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import _ from 'lodash';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, Cell, Tooltip, XAxis, YAxis } from 'recharts';\nimport { colorType } from '../assets/constant';\nimport { getAllDrawingSameValueInOneColumn, mergeUndefined } from '../utils/function';\n\n\n\nconst ChartBarDrawing = ({ data, openDrawingTable, projectName }) => {\n\n\n    const { drawingCount, drawingList } = mergeUndefined(getAllDrawingSameValueInOneColumn(data, 'Rev'), '0');\n    const dataChart = _.map(drawingCount, (value, name) => ({ name, value }));\n\n\n    const onClick = (e) => {\n        openDrawingTable(\n            projectName,\n            { type: 'Drawings by revision', category: `Revision ${e.name}` },\n            drawingList[e.name],\n            data.columnsIndexArray\n        );\n    };\n\n    const [activeIndex, setActiveIndex] = useState(null);\n\n    const onMouseEnter = (data, index) => {\n        setActiveIndex(index);\n    };\n    const onMouseLeave = (data, index) => {\n        setActiveIndex(null);\n    };\n\n\n    return (\n        <div style={{ margin: '0 auto', display: 'table' }}>\n            <BarChart\n                width={320}\n                height={350}\n                data={dataChart}\n                margin={{ top: 35, right: 30, left: 0, bottom: 20 }}\n                padding={{ top: 10 }}\n                barSize={20}\n            >\n                <XAxis dataKey='name' textAnchor='end' angle={-45} interval={0} scale='point' padding={{ left: 30, right: 30 }} />\n                <YAxis />\n                <Tooltip />\n                <CartesianGrid strokeDasharray='3 3' />\n                <Bar\n                    dataKey='value'\n                    background={{ fill: colorType.grey0 }}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    barSize={25}\n                >\n                    {dataChart.map((entry, index) => (\n                        <Cell\n                            cursor='pointer'\n                            fill={index === activeIndex ? colorType.grey1 : colorType.grey2}\n                            key={`cell-${index}`}\n                        />\n                    ))}\n                </Bar>\n\n            </BarChart>\n        </div>\n\n    );\n};\n\nexport default ChartBarDrawing;\n\n\n","import { Card, Col } from 'antd';\r\nimport React from 'react';\r\nimport { sizeType } from '../../assets/constant';\r\n\r\n\r\n\r\nconst CardPanel = ({ children, title, headColor }) => {\r\n\r\n    const width = window.innerWidth >= sizeType.xl ? (window.innerWidth - 160) / 4 :\r\n        window.innerWidth >= sizeType.md ? (window.innerWidth - 80) / 2 :\r\n            window.innerWidth - 100;\r\n\r\n\r\n    return (\r\n        <Col style={{ padding: '0 15px' }} xs={{ span: 24 }} md={{ span: 12 }} xl={{ span: 6 }}>\r\n            <Card\r\n                title={title}\r\n                style={{\r\n                    margin: 0, boxShadow: '5px 15px 24px 5px #d2dae2',\r\n                    border: 'none',\r\n                    paddingBottom: 20,\r\n                    marginBottom: 20,\r\n                    borderRadius: 20, overflow: 'hidden'\r\n                }}\r\n                bodyStyle={{\r\n                    margin: 'auto',\r\n                    padding: 0\r\n                }}\r\n                headStyle={{\r\n                    backgroundColor: headColor,\r\n                    color: 'white',\r\n                    lineHeight: '15px'\r\n                }}\r\n            >\r\n                {children}\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\n\r\nexport default CardPanel;\r\n","\r\nimport { Badge, Tooltip } from 'antd';\r\nimport React from 'react';\r\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts';\r\nimport styled from 'styled-components';\r\nimport { chartWidth, colorType, sizeType } from '../assets/constant';\r\nimport { getDrawingLateNow } from '../utils/function';\r\nimport CardPanel from './ui/CardPanel';\r\n\r\n\r\n\r\nconst ChartBarDrawingLate = ({ data, title }) => {\r\n\r\n\r\n    let dataChart = [];\r\n    data && Object.keys(data).forEach(project => {\r\n        const drawingsLateApproval = getDrawingLateNow(data[project], 'getApproval');\r\n        dataChart.push({\r\n            name: project,\r\n            value: drawingsLateApproval.length\r\n        });\r\n    });\r\n\r\n\r\n    const dummyLateConstruction = [\r\n        { name: 'Sumang', value: 15 },\r\n        { name: 'Handy', value: 6 },\r\n    ];\r\n\r\n    const inputData = title === 'No Of Drawing Late Construction' ? dummyLateConstruction\r\n        : title === 'No Of Drawing Late Approval' ? dataChart : null\r\n\r\n    return (\r\n\r\n        <CardPanel\r\n            title={title}\r\n            headColor={colorType.red}\r\n        >\r\n            <BarChart\r\n                data={inputData}\r\n                width={chartWidth}\r\n                height={320}\r\n                margin={{ top: 35, right: 20, left: 15, bottom: 30 }}\r\n                padding={{ top: 10 }}\r\n                barSize={30}\r\n            >\r\n                <CartesianGrid strokeDasharray='3 3' />\r\n                <XAxis dataKey='name' textAnchor='end' angle={-20} interval={0} scale='point' padding={{ left: 50, right: 50 }} />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Bar\r\n                    dataKey='value'\r\n                    fill={colorType.red}\r\n                    background={{ fill: '#eee', padding: '0 25px' }}\r\n                >\r\n                    <LabelList dataKey='value' position='top' />\r\n                </Bar>\r\n            </BarChart>\r\n\r\n            <div style={{ paddingLeft: 50, height: window.innerWidth >= sizeType.xl && 180 }}>\r\n                {inputData && inputData.map(item => (\r\n                    <div key={item.name} style={{ display: 'flex' }}>\r\n                        <StyledBadge\r\n                            size='small'\r\n                            color={colorType.red}\r\n                            text={item.name}\r\n                        />\r\n                        <span style={{ paddingLeft: 5 }}>{`- (${item.value})`}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n        </CardPanel>\r\n    );\r\n};\r\n\r\nexport default ChartBarDrawingLate;\r\n\r\n\r\n\r\nconst StyledBadge = styled(Badge)`\r\n    .ant-badge-status-dot {\r\n        width: 15px;\r\n        height: 15px;\r\n        border-radius: 0;\r\n    }\r\n`;","\r\nimport { Badge, Tooltip } from 'antd';\r\nimport React from 'react';\r\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts';\r\nimport styled from 'styled-components';\r\nimport { chartWidth, colorType, pieChartColors2 } from '../assets/constant';\r\nimport { getAllDrawingSameValueInOneColumn, mergeUndefined } from '../utils/function';\r\nimport CardPanel from './ui/CardPanel';\r\n\r\n\r\nconst ChartBarStack = ({ data, title }) => {\r\n\r\n\r\n\r\n    const inputData = title === 'Drawing Status' ? convertDataToStackedChart(data).dataChart\r\n        : title === 'Productivity - (days per drawing)' ? productivity.inputData : null;\r\n\r\n    const inputStack = title === 'Drawing Status' ? convertDataToStackedChart(data).itemArr\r\n        : title === 'Productivity - (days per drawing)' ? productivity.inputStack : null;\r\n\r\n\r\n    return (\r\n\r\n        <CardPanel\r\n            title={title}\r\n            headColor={colorType.orange}\r\n        >\r\n            <BarChart\r\n                data={inputData}\r\n                width={chartWidth}\r\n                height={320}\r\n                margin={{ top: 35, right: 20, left: 15, bottom: 30 }}\r\n                padding={{ top: 10 }}\r\n                barSize={30}\r\n            >\r\n                <CartesianGrid strokeDasharray='3 3' />\r\n                <XAxis tickSize={3} dataKey='name' textAnchor='end' angle={-20} interval={0} scale='point' padding={{ left: 50, right: 50 }} />\r\n                <YAxis />\r\n                <Tooltip />\r\n                {inputStack.map((item, i) => (\r\n                    <Bar\r\n                        key={item}\r\n                        dataKey={item}\r\n                        stackId='a'\r\n                        fill={pieChartColors2[item]}\r\n                    >\r\n                        <LabelList dataKey='item' position='top' />\r\n                    </Bar>\r\n                ))}\r\n            </BarChart>\r\n\r\n            <div style={{ paddingLeft: 50, height: 180 }}>\r\n                {inputStack.map((key, i) => (\r\n                    <div key={key} style={{ display: 'flex' }}>\r\n                        <StyledBadge\r\n                            size='small'\r\n                            color={pieChartColors2[key]}\r\n                            text={key}\r\n                        />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n        </CardPanel>\r\n    );\r\n};\r\n\r\nexport default ChartBarStack;\r\n\r\n\r\nconst StyledBadge = styled(Badge)`\r\n    .ant-badge-status-dot {\r\n        width: 15px;\r\n        height: 15px;\r\n        border-radius: 0;\r\n    }\r\n`;\r\n\r\nconst productivity = {\r\n    inputData: [\r\n        {\r\n            'Modelling': 3,\r\n            'Shopdrawing': 5,\r\n            'Submit To Consultant': 2,\r\n            'Consultant Reply': 5,\r\n            'Get Approval': 4,\r\n            'name': 'Sumang'\r\n        },\r\n        {\r\n            'Modelling': 4,\r\n            'Shopdrawing': 6,\r\n            'Submit To Consultant': 3,\r\n            'Consultant Reply': 4,\r\n            'Get Approval': 2,\r\n            'name': 'Handy'\r\n        }\r\n    ],\r\n    inputStack: ['Modelling', 'Shopdrawing', 'Submit To Consultant', 'Consultant Reply', 'Get Approval']\r\n};\r\n\r\n\r\n\r\nconst convertDataToStackedChart = (data) => {\r\n    let dataChart = [];\r\n    let allKeys = [];\r\n    data && Object.keys(data).forEach(project => {\r\n        const { drawingCount, drawingList } = mergeUndefined(getAllDrawingSameValueInOneColumn(data[project], 'Status'), 'Not Started');\r\n        dataChart.push({ ...drawingCount, name: project });\r\n        allKeys = [...allKeys, ...Object.keys(drawingCount)];\r\n    });\r\n    const itemArr = [...new Set(allKeys)];\r\n\r\n    itemArr.forEach(key => {\r\n        dataChart.forEach(projectData => {\r\n            if (key in projectData) return;\r\n            projectData[key] = 0;\r\n        });\r\n    });\r\n\r\n    return {\r\n        dataChart,\r\n        itemArr\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import { Badge } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Cell, Pie, PieChart } from 'recharts';\nimport styled from 'styled-components';\nimport { pieChartColors2 } from '../assets/constant';\nimport { getAllDrawingSameValueInOneColumn, mergeUndefined } from '../utils/function';\n\n\n\n\nconst ChartPieDrawing = ({ data, openDrawingTable, projectName }) => {\n\n    const { drawingCount, drawingList } = mergeUndefined(getAllDrawingSameValueInOneColumn(data, 'Status'), 'Not Started');\n    const dataChart = _.map(drawingCount, (value, name) => ({ name, value }));\n    console.log(dataChart);\n    const onClick = (portion) => {\n        openDrawingTable(\n            projectName,\n            { type: 'Drawing Status', category: portion.name },\n            drawingList[portion.name],\n            data.columnsIndexArray\n        );\n    };\n\n    // const [activeIndex, setActiveIndex] = useState(null);\n    // const onMouseEnter = (data, index) => {\n    //     setActiveIndex(index);\n    // };\n    // const onMouseLeave = (data, index) => {\n    //     setActiveIndex(null);\n    // };\n\n\n    return (\n        <>\n            <PieChart width={300} height={300} style={{ margin: '0 auto' }}>\n                <Pie\n                    data={dataChart}\n                    cx={150}\n                    cy={150}\n                    labelLine={false}\n                    label={renderCustomizedLabel}\n                    dataKey='value'\n                    outerRadius={100}\n                    onClick={onClick}\n                // onMouseEnter={onMouseEnter}\n                // onMouseLeave={onMouseLeave}\n                >\n                    {Object.keys(drawingCount).map(item => (\n                        <Cell\n                            cursor='pointer'\n                            key={`cell-${item}`}\n                            fill={pieChartColors2[item]}\n                        />\n                    ))}\n                </Pie>\n            </PieChart>\n\n            <div style={{ margin: '0 auto', display: 'table' }}>\n                {Object.keys(drawingCount).map(item => (\n                    <div key={item}>\n                        <StyledBadge\n                            size='small'\n                            color={pieChartColors2[item]}\n                            text={item}\n                        />\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default ChartPieDrawing;\n\n\n\nconst StyledBadge = styled(Badge)`\n    .ant-badge-status-dot {\n        width: 15px;\n        height: 15px;\n        border-radius: 0;\n    }\n`;\n\n\nconst renderCustomizedLabel = (args) => {\n    const { cx, cy, midAngle, innerRadius, outerRadius, percent, value } = args\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * Math.PI / 180);\n    const y = cy + radius * Math.sin(-midAngle * Math.PI / 180);\n\n    return (\n        <text x={x} y={y} fill='white' textAnchor={x > cx ? 'start' : 'end'} dominantBaseline='central'>\n            {/* {`${(percent * 100).toFixed(0)}%`} */}\n            {value}\n        </text>\n    );\n};\n\n\n\n\n","import { Modal, Progress } from 'antd';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../assets/constant';\nimport { getDrawingLateNow } from '../utils/function';\n\n\nconst ChartProgress = ({ data, projectName, openDrawingTable }) => {\n\n    const { allDrawingsLatestRevision, columnsIndexArray } = data;\n\n    const drawingsLateSubmission = getDrawingLateNow(data, 'drgToConsultant');\n    const drawingsLateApproval = getDrawingLateNow(data, 'getApproval');\n\n\n    const lateForConstruction = projectName === 'Handy' ? 6 : projectName === 'Sumang' ? 15 : null;\n\n    const dataInput = [\n        {\n            name: `Late for construction ${lateForConstruction}/${allDrawingsLatestRevision.length}`,\n            value: lateForConstruction\n        },\n        {\n            name: `Overdue date of submission ${drawingsLateSubmission.length}/${allDrawingsLatestRevision.length}`,\n            value: drawingsLateSubmission.length\n        },\n        {\n            name: `Overdue date of approval ${drawingsLateApproval.length}/${allDrawingsLatestRevision.length}`,\n            value: drawingsLateApproval.length\n        }\n    ];\n\n    const progressBarClick = (name) => {\n        let dwgs;\n        let category;\n        if (name.includes('construction')) {\n            dwgs = [];\n            category = 'Late for construction';\n        } else if (name.includes('submission')) {\n            dwgs = drawingsLateSubmission;\n            category = 'Overdue date of submission';\n        } else if (name.includes('approval')) {\n            dwgs = drawingsLateApproval;\n            category = 'Overdue date of approval';\n        };\n\n        openDrawingTable(\n            projectName,\n            { type: 'Overdue Drawings', category: category },\n            dwgs,\n            columnsIndexArray\n        );\n    };\n\n    const [modalShown, setModalShown] = useState(false);\n    const drawingStatusTableOnClose = () => {\n        setModalShown(false);\n    };\n\n\n\n    return (\n        <>\n            <div style={{ width: '80%', margin: '25px auto' }}>\n\n                {dataInput.map(item => (\n                    <Container key={item.name} onClick={() => progressBarClick(item.name)}>\n                        <span>{item.name}</span>\n                        <Progress\n                            trailColor='#eee'\n                            strokeColor={colorType.grey2}\n                            percent={Math.round(item.value / allDrawingsLatestRevision.length * 100)}\n                            style={{ paddingBottom: 29 }}\n                        />\n                    </Container>\n                ))}\n            </div>\n\n\n            <Modal\n                title={'xxx'}\n                centered\n                visible={modalShown}\n                onOk={drawingStatusTableOnClose}\n                onCancel={drawingStatusTableOnClose}\n            >\n                <h1>{`Total drawing x}`}</h1>\n                <h2>{`Overdue date of approval x`}</h2>\n            </Modal>\n        </>\n\n    );\n};\n\nexport default ChartProgress;\n\nconst Container = styled.div`\n    &:hover {\n        cursor: pointer,\n    }\n`;\n\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ButtonCapsule = props => {\r\n    const { btnname, color } = props;\r\n\r\n    return (\r\n        <Container {...props} color={color} >\r\n            {btnname}\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default ButtonCapsule;\r\n\r\n// const Container = styled(Button)`\r\nconst Container = styled.div`\r\n    &:hover {\r\n        cursor: pointer;\r\n        background: #bdc3c7;\r\n    }\r\n    transition: 0.3s;\r\n    line-height: 13px;\r\n    font-size: 12px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 3px;\r\n    padding: 5px;\r\n    border: 1px solid;\r\n    border-radius: 500px;\r\n    border-color: ${props => props.color};\r\n    background: ${props => props.color};\r\n    \r\n`;\r\n","import { Button, Divider, Modal, Select } from 'antd';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../assets/constant';\nimport ButtonCapsule from './ui/ButtonCapsule';\n\n\n\nconst FormPivot = ({ projectName, data, openDrawingTable }) => {\n\n    const { columnsIndexArray } = data;\n\n\n    const [pivotArray, setPivotArray] = useState([]);\n    const [titleLeft, setTitleLeft] = useState(Object.keys(columnsIndexArray));\n    const [value, setValue] = useState('Select an option...');\n    const [selected, setSelected] = useState(null);\n    const [modalFormatVisible, setModalFormatVisible] = useState(false);\n\n\n    const onChange = value => {\n        setValue('Select an option...');\n        setSelected(value);\n        if (columnsInDateFormat.includes(value)) {\n            setModalFormatVisible(true);\n        } else {\n            setTitleLeft(titleLeft.filter(title => title !== value));\n            setPivotArray([...pivotArray, value]);\n        };\n    };\n\n    const selectFormat = (e) => {\n        const formatType = e.target.textContent;\n        setTitleLeft(titleLeft.filter(title => title !== selected));\n        setPivotArray([...pivotArray, selected + ' - ' + formatType]);\n        setModalFormatVisible(false);\n    };\n\n    const onCloseModalType = () => {\n        setModalFormatVisible(false);\n    };\n\n    const onResetHandle = () => {\n        setPivotArray([]);\n        setTitleLeft(Object.keys(columnsIndexArray));\n    };\n\n\n    const sortedTableOpen = () => {\n        // openDrawingTable(projectName, 'Sorted Table', pivotArray);\n    };\n\n\n\n\n    const onRemoveCategory = (e) => {\n        const btnName = e.target.previousSibling.previousSibling.innerText;\n        setPivotArray(pivotArray.filter(x => x !== btnName));\n    };\n\n    console.log(pivotArray);\n\n    return (\n        <div style={{ marginTop: '10px', padding: '20px' }}>\n            {pivotArray.map(cl => (\n                <div key={cl} style={{ width: '100%', margin: '10px auto', padding: 5, border: `1px solid ${colorType.grey1}`, borderRadius: 3 }}>\n                    <span style={{ marginRight: 15 }}>{cl}</span>\n                    <Divider type='vertical' />\n                    <SpanOmit style={{ marginRight: 15 }} onClick={onRemoveCategory}>X</SpanOmit>\n                </div>\n            ))}\n\n            <Select\n                value={value}\n                showSearch\n                style={{ width: '100%', margin: '0 auto', display: 'table' }}\n                placeholder='Select a title'\n                optionFilterProp='children'\n                onChange={onChange}\n                filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n            >\n                {titleLeft.map(cl => (\n                    <Select.Option value={cl} key={cl}>{cl}</Select.Option>\n                ))}\n            </Select>\n            <div style={{ display: 'flex' }}>\n                <Button\n                    style={{ background: colorType.grey0, width: '90%', margin: '10px auto' }}\n                    onClick={sortedTableOpen}\n                >Go to sorted table</Button>\n                <Button\n                    style={{ background: colorType.grey2, width: '90%', margin: '10px auto' }}\n                    onClick={onResetHandle}\n                >Reset</Button>\n            </div>\n\n\n            <Modal\n                title='Select the format'\n                visible={modalFormatVisible}\n                onCancel={onCloseModalType}\n                footer={null}\n            >\n                <ButtonCapsule btnname='Week' onClick={selectFormat} />\n                <ButtonCapsule btnname='Month' onClick={selectFormat} />\n                <ButtonCapsule btnname='Year' onClick={selectFormat} />\n            </Modal>\n\n        </div>\n    );\n};\n\nexport default FormPivot;\n\n\n\n\nconst SpanOmit = styled.span`\n    :hover {\n        color: red;\n        cursor: pointer\n    }\n\n`;\n\nconst columnsInDateFormat = [\n    'Model Start(T)',\n    'Model Start(A)',\n    'Model Finish (T)',\n    'Model Finish (A)',\n    'Drawing Start (T)',\n    'Drawing Finish (T)',\n    'Drawing Start (A)',\n    'Drawing Finish (A)',\n    'Drg to Consultant (T)',\n    'Drg to Consultant (A)',\n    'get Approval (T)',\n    'get Approval (A)'\n];\n","import { DownCircleOutlined, MessageOutlined } from '@ant-design/icons';\r\nimport { Avatar, BackTop, Divider, Icon, Layout, Row } from 'antd';\r\nimport React from 'react';\r\nimport { colorType, sizeType } from '../assets/constant';\r\n\r\n\r\nconst NavBar = props => {\r\n\r\n    const { children } = props;\r\n\r\n\r\n    return (\r\n        <Layout >\r\n            <Layout.Header style={{ position: 'fixed', zIndex: 1, width: '100%', padding: '0 10px', height: 55, background: '#576574' }}>\r\n                <div style={{ paddingTop: 5 }}>\r\n   \r\n\r\n                    <Row style={{ float: 'left' }}>\r\n                        {/* <img alt='logo' style={{ transform: 'translateY(-10px) translateX(-5px)' }} width={150} src='./img/logo3.png' /> */}\r\n                    </Row>\r\n\r\n\r\n                    <Row style={{ float: 'right' }}>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <div style={{ color: 'white', paddingRight: 15 }}>\r\n                                <div style={{ lineHeight: '22px', fontSize: 17, textAlign: 'right' }}>Jonas Shelomoh</div>\r\n                                <div style={{ lineHeight: '20px', fontSize: 13, textAlign: 'right' }}>Project Director</div>\r\n                            </div>\r\n                            <Avatar size={40} icon='user' />\r\n                            {window.innerWidth <= sizeType.xs ? '' : (\r\n                                <>\r\n                                    <Divider type='vertical' style={{ backgroundColor: '#f9ca24', height: 40, width: 1, margin: '0 15px' }} />\r\n                                    <MessageOutlined style={{ color: '#f9ca24', fontSize: 40, marginRight: 10 }} />\r\n                                    <DownCircleOutlined style={{ color: '#f9ca24', fontSize: 40, marginRight: 10 }} />\r\n                                </>\r\n                            )}\r\n\r\n                        </div>\r\n                    </Row>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </Layout.Header>\r\n\r\n\r\n            <BackTop>\r\n                <div style={{\r\n                    zIndex: 1000,\r\n                    height: 40,\r\n                    width: 40,\r\n                    lineHeight: '40px',\r\n                    borderRadius: 4,\r\n                    backgroundColor: colorType.yellow,\r\n                    color: 'white',\r\n                    textAlign: 'center',\r\n                    fontSize: 20,\r\n                }}><Icon style={{ fontSize: '30px' }} type='arrow-up' /></div>\r\n            </BackTop>\r\n\r\n            {children}\r\n\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import { Icon } from 'antd';\r\nimport React, { useMemo } from 'react';\r\nimport { useExpanded, useGroupBy, useTable } from 'react-table';\r\nimport styled from 'styled-components';\r\nimport { pickDataToTable } from '../utils/function';\r\n\r\n\r\n\r\nconst Table = ({ columns, data }) => {\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        state: { groupBy, expanded }\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data\r\n        },\r\n        useGroupBy,\r\n        useExpanded,\r\n        // useBlockLayout\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column =>\r\n                                <th {...column.getHeaderProps()} >\r\n                                    {column.canGroupBy ? (\r\n                                        <span {...column.getGroupByToggleProps()}>\r\n                                            {column.isGrouped ? <IconTable type='stop' /> : <IconTable type='plus-circle' />}\r\n                                        </span>\r\n                                    ) : null}\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            )}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n\r\n                <tbody {...getTableBodyProps()} style={{ height: 500, overflowY: 'scroll' }}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <td {...cell.getCellProps()}\r\n                                            style={{\r\n                                                background: cell.isGrouped\r\n                                                    ? '#0aff0082'\r\n                                                    : cell.isAggregated\r\n                                                        ? '#ffa50078'\r\n                                                        : cell.isPlaceholder\r\n                                                            ? '#ff000042'\r\n                                                            : 'white',\r\n                                            }}\r\n                                        >\r\n                                            {cell.isGrouped ? (\r\n                                                <>\r\n                                                    <span {...row.getExpandedToggleProps()}>\r\n                                                        {row.isExpanded ? <IconTable type='up-circle' /> : <IconTable type='down-circle' />}\r\n                                                    </span>{' '}\r\n                                                    {cell.render('Cell')} ({row.subRows.length})\r\n                                                </>\r\n                                            )\r\n                                                : cell.isAggregated ? cell.render('Aggregated')\r\n                                                    : cell.isPlaceholder ? null\r\n                                                        : (cell.render('Cell'))}\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n\r\n            </table>\r\n        </>\r\n    );\r\n};\r\n\r\nconst IconTable = ({ type }) => {\r\n\r\n    return (\r\n        <Icon style={{ fontSize: 16, marginRight: 5, color: 'red' }} type={type} />\r\n    );\r\n};\r\n\r\nconst TableDrawingList = ({ data }) => {\r\n\r\n    const columns = useMemo(() => [\r\n        {\r\n            Header: 'Name',\r\n            columns: [\r\n                {\r\n                    Header: 'Drawing Number',\r\n                    accessor: 'drawingNumber',\r\n                },\r\n                {\r\n                    Header: 'Drawing Name',\r\n                    accessor: 'drawingName',\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            Header: 'Info',\r\n            columns: [\r\n                {\r\n                    Header: 'RFA Ref',\r\n                    accessor: 'rfaRef',\r\n                },\r\n                {\r\n                    Header: 'Drg Type',\r\n                    accessor: 'drgType',\r\n                },\r\n                {\r\n                    Header: 'Use For',\r\n                    accessor: 'useFor',\r\n                },\r\n                {\r\n                    Header: 'Coordinator In Charge',\r\n                    accessor: 'coordinatorInCharge',\r\n                },\r\n                {\r\n                    Header: 'Modeller',\r\n                    accessor: 'modeller',\r\n                },\r\n                {\r\n                    Header: 'Drg To Consultant (T)',\r\n                    accessor: 'drgToConsultantT',\r\n                },\r\n                {\r\n                    Header: 'Drg To Consultant (A)',\r\n                    accessor: 'drgToConsultantA',\r\n                },\r\n                {\r\n                    Header: 'get Approval (T)',\r\n                    accessor: 'getApprovalT',\r\n                },\r\n                {\r\n                    Header: 'get Approval (A)',\r\n                    accessor: 'getApprovalA',\r\n                },\r\n                {\r\n                    Header: 'Rev',\r\n                    accessor: 'rev',\r\n                },\r\n                {\r\n                    Header: 'Status',\r\n                    accessor: 'status',\r\n                },\r\n            ],\r\n        },\r\n    ], []);\r\n\r\n    console.log(data);\r\n    const { projectName, title, drawings, columnsIndexArray } = data;\r\n\r\n    return (\r\n        <Container>\r\n            <Table columns={columns} data={pickDataToTable(drawings, columnsIndexArray)} />\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default TableDrawingList;\r\n\r\n\r\nconst Container = styled.div`\r\n    padding: 1rem;\r\n    overflow: auto;\r\n    white-space: nowrap;\r\n    overflow-y: scroll;\r\n    height: ${0.6 * window.innerHeight}px;\r\n    vertical-align: middle;\r\n\r\n    table {\r\n        border-spacing: 0;\r\n        border: 1px solid black;\r\n\r\n        tr {\r\n            :last-child {\r\n                td {\r\n                    border-bottom: 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        th, td {\r\n            margin: 0;\r\n            padding: 0.2rem;\r\n            border-bottom: 1px solid black;\r\n            border-right: 1px solid black;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            :last-child {\r\n                border-right: 0;\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import { Card, Row } from 'antd';\r\nimport React from 'react';\r\nimport { colorType } from '../../assets/constant';\r\n\r\n\r\n\r\nconst CardPanelProject = ({ children, title }) => {\r\n\r\n\r\n    return (\r\n        <Card\r\n            title={title}\r\n            style={{\r\n                margin: 0, boxShadow: '5px 15px 24px 5px #d2dae2',\r\n                border: 'none',\r\n                paddingBottom: 20,\r\n                marginBottom: 20,\r\n                borderRadius: 20, overflow: 'hidden',\r\n            }}\r\n            bodyStyle={{\r\n                margin: 'auto',\r\n                padding: 0,\r\n            }}\r\n            headStyle={{\r\n                backgroundColor: colorType.grey2,\r\n                color: 'white',\r\n                lineHeight: '15px'\r\n            }}\r\n        >\r\n            <div style={{ margin: '20px' }}>\r\n                <Row justify='space-around'>\r\n                    {children}\r\n                </Row>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CardPanelProject;\r\n","import { Col, Divider, Modal, Row, Skeleton } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { colorType } from '../assets/constant';\r\nimport ChartBarDrawing from '../components/ChartBarDrawing';\r\nimport ChartBarDrawingLate from '../components/ChartBarDrawingLate';\r\nimport ChartBarStack from '../components/ChartBarStack';\r\nimport ChartPieDrawing from '../components/ChartPieDrawing';\r\nimport ChartProgress from '../components/ChartProgress';\r\nimport FormPivot from '../components/FormPivot';\r\nimport NavBar from '../components/NavBar';\r\nimport TableDrawingList from '../components/TableDrawingList';\r\nimport CardPanel from '../components/ui/CardPanel';\r\nimport CardPanelProject from '../components/ui/CardPanelProject';\r\nimport { getDataConverted } from '../utils/function';\r\n\r\n\r\n\r\nconst PageDashboard = () => {\r\n\r\n\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const loadData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const result = await Axios.post(\r\n                    'https://bim.wohhup.com/api/smartsheet/get-sheets-dashboard',\r\n                    { listSheetId: [8919906142971780, 4758181617395588] }\r\n                );\r\n                setData(getDataConverted(result.data));\r\n                setLoading(false);\r\n\r\n                // setTimeout(() => {\r\n                //     const result = JSON.parse(localStorage.getItem('wh'));\r\n                //     console.log('-----------------------------------------', 'DATA FETCHED');\r\n                //     setData(getDataConverted(result));\r\n                //     setLoading(false);\r\n                // }, 100);\r\n                // localStorage.setItem('wh', JSON.stringify(result.data));\r\n            } catch (err) {\r\n                console.log(err);\r\n                setLoading(false);\r\n            };\r\n        };\r\n        loadData();\r\n    }, []);\r\n\r\n\r\n    const [drawingTableVisible, setDrawingTableVisible] = useState(false);\r\n    const [drawingTableData, setDrawingTableData] = useState(null);\r\n    const openDrawingTable = (projectName, title, drawings, columnsIndexArray) => {\r\n        setDrawingTableData({ projectName, title, drawings, columnsIndexArray });\r\n        setDrawingTableVisible(true);\r\n    };\r\n\r\n\r\n    return (\r\n        <NavBar>\r\n            <div style={{ marginTop: '60px' }}>\r\n                <Row justify='space-around' style={{ margin: '25px 0 5px 0' }}>\r\n                    <ChartBarDrawingLate title='No Of Drawing Late Construction' />\r\n                    <ChartBarDrawingLate data={data} title='No Of Drawing Late Approval' />\r\n                    <ChartBarStack data={data} title='Drawing Status' />\r\n                    <ChartBarStack title='Productivity - (days per drawing)' />\r\n                </Row>\r\n\r\n                {!loading && data ? (\r\n                    <div style={{ padding: '0 12px' }}>\r\n                        {Object.keys(data).map(projectName => {\r\n                            return (\r\n                                <CardPanelProject\r\n                                    title={projectName.toUpperCase()}\r\n                                    key={projectName}\r\n                                >\r\n                                    <ChartPanel title='Overdue submissions'>\r\n                                        <ChartProgress\r\n                                            data={data[projectName]}\r\n                                            openDrawingTable={openDrawingTable}\r\n                                            projectName={projectName}\r\n                                        />\r\n                                    </ChartPanel>\r\n\r\n                                    {/* {deviceWidth && deviceWidth >= sizeType.md && <Divider type='horizontal' style={{ padding: '3px 0' }} />} */}\r\n\r\n                                    <ChartPanel title='Drawing Status'>\r\n                                        <ChartPieDrawing\r\n                                            data={data[projectName]}\r\n                                            openDrawingTable={openDrawingTable}\r\n                                            projectName={projectName}\r\n                                        />\r\n                                    </ChartPanel>\r\n\r\n                                    {/* {deviceWidth && deviceWidth >= sizeType.xl && <Divider type='horizontal' style={{ padding: '3px 0' }} />} */}\r\n\r\n                                    <ChartPanel title='Drawing counts by revision'>\r\n                                        <ChartBarDrawing\r\n                                            data={data[projectName]}\r\n                                            openDrawingTable={openDrawingTable}\r\n                                            projectName={projectName}\r\n                                        />\r\n                                    </ChartPanel>\r\n\r\n                                    {/* {deviceWidth && deviceWidth >= sizeType.md && <Divider type='horizontal' style={{ padding: '3px 0' }} />} */}\r\n\r\n                                    <ChartPanel title='Sorted table by category'>\r\n                                        <FormPivot\r\n                                            data={data[projectName]}\r\n                                            openDrawingTable={openDrawingTable}\r\n                                            projectName={projectName}\r\n                                        />\r\n                                    </ChartPanel>\r\n\r\n                                </CardPanelProject>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                ) : <SkeletonCard />}\r\n\r\n\r\n                {drawingTableData && (\r\n                    <Modal\r\n                        title={drawingTableData.projectName}\r\n                        visible={drawingTableVisible}\r\n                        onOk={() => setDrawingTableVisible(false)}\r\n                        onCancel={() => setDrawingTableVisible(false)}\r\n                        width={0.9 * window.innerWidth}\r\n                        height={0.7 * window.innerHeight}\r\n                        // centered={true}\r\n                        style={{\r\n                            // justifyContent: 'center',\r\n                            // alignItems: 'center'\r\n                        }}\r\n                    >\r\n                        <h2>{drawingTableData.title.type}</h2>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <h3>{drawingTableData.title.category}</h3>\r\n                            <Divider type='vertical' />\r\n                            <h3>{drawingTableData.drawings.length + ' drawings'}</h3>\r\n                        </div>\r\n\r\n                        <TableDrawingList\r\n                            data={drawingTableData}\r\n                        />\r\n                    </Modal>\r\n                )}\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </NavBar>\r\n    );\r\n};\r\n\r\nexport default PageDashboard;\r\n\r\n\r\n\r\n\r\n\r\nconst ChartPanel = ({ title, children }) => {\r\n    return (\r\n        <Col style={{ marginBottom: 10 }} xs={24} md={12} xl={6}>\r\n            <div style={{ fontSize: '18px', textAlign: 'center', fontWeight: 'bold' }}>{title}</div>\r\n            {children}\r\n        </Col>\r\n    );\r\n};\r\n\r\n\r\nconst SkeletonCard = () => {\r\n    return (\r\n        <div style={{ padding: '0 12px' }}>\r\n            <CardPanel\r\n                title='Project loading ...'\r\n                headColor={colorType.grey2}\r\n                headTitleColor={'white'}\r\n            >\r\n                <div style={{ padding: '20px', marginBottom: '95px' }}><Skeleton /><Skeleton /></div>\r\n            </CardPanel>\r\n            <CardPanel\r\n                title='Project loading ...'\r\n                headColor={colorType.grey2}\r\n                headTitleColor={'white'}\r\n            >\r\n                <div style={{ padding: '20px', marginBottom: '95px' }}><Skeleton /><Skeleton /></div>\r\n            </CardPanel>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","\r\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\n\r\nconst PageLogin = () => {\r\n\r\n   const onHandleSubmit = data => {\r\n      // setLoading(true);\r\n      // axios.post(`http://localhost:5000/users`, data)\r\n      //    .then(res => {\r\n      //       setLoading(false);\r\n      //       message.success('User Added Successfully!');\r\n      //       history.push('/list');\r\n      //    })\r\n      //    .catch(error => {\r\n      //       setLoading(false);\r\n      //       message.error(error);\r\n      //    });\r\n   };\r\n\r\n   // https://medium.com/wesionary-team/how-to-implement-ant-design-with-react-7d21b6e261cc\r\n   return (\r\n      <div>\r\n         <Form\r\n            className='login-form'\r\n            style={{\r\n               width: '500px',\r\n               labelCol: { span: 8 },\r\n               wrapperCol: { span: 16 },\r\n            }}\r\n            onFinish={onHandleSubmit}\r\n         >\r\n\r\n            <Form.Item style={{ textAlign: 'center' }}>\r\n               <img src='/img/logo.png' alt='Woh Hup' />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n               name='Email'\r\n               rules={[\r\n                  { required: true, message: 'Please input your email!' },\r\n                  { type: 'email', message: 'Please input a valid email!' },\r\n               ]}\r\n            >\r\n               <Input\r\n                  size='large'\r\n                  placeholder='Email'\r\n                  prefix={<UserOutlined />}\r\n                  autoComplete='off'\r\n               />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n               name='Password'\r\n               rules={[\r\n                  { required: true, message: 'Please input your password!' },\r\n                  { min: 6, message: 'Password must be minimum 6 characters.' }\r\n               ]}\r\n            >\r\n               <Input.Password\r\n                  size='large'\r\n                  placeholder='Password'\r\n                  prefix={<LockOutlined />}\r\n                  iconRender={visible => ''}\r\n               />\r\n            </Form.Item>\r\n\r\n            <Form.Item style={{ wrapperCol: { offset: 8, span: 16 } }}>\r\n               <Button type='primary' htmlType='submit'>Submit</Button>\r\n            </Form.Item>\r\n\r\n         </Form>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default PageLogin;\r\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport PageDashboard from './layouts/PageDashboard';\n// import PageDashboard from './layouts/PageDashboard';\nimport PageLogin from './layouts/PageLogin';\n\n\nconst App = () => {\n\n   return (\n      <BrowserRouter>\n         <Switch>\n            <Route exact path='/' component={PageDashboard} />\n            {/* <Route exact path='/dashboard' component={PageDashboard} /> */}\n            <Route path='/login' component={PageLogin} />\n         </Switch>\n      </BrowserRouter>\n   );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <StrictMode>\n    <App />\n  // </StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}